    @GetMapping("/list_paged_tdcs")
    @ResponseStatus(HttpStatus.OK)
    public ResponseEntity<?> listPagedTdcs(
            @PageableDefault(size = 10, page = 0) Pageable pageable,
            @RequestParam(required = false) Integer status,
            @RequestParam(required = false) Integer satisfaccion,
            @RequestParam(required = false) String cups,
            @RequestParam(required = false) Long idCt,
            @RequestParam(required = false) String tipo,
            @RequestParam(required = false) String subtipo,
            @RequestParam(required = false) String sortField,
            @RequestParam(required = false) Integer sortOrder) throws Exception {
        return ResponseEntity.ok(tdcService.findByCriteria(cups, status, satisfaccion, idCt, tipo, subtipo, sortField, sortOrder, pageable).map(mapper::TdcToTdcDTO));

    }


public Page<Tdc> findByCriteria(String cups, Integer status, Integer satisfaccion, Long idCt, String tipo, String subtipo ,String sortField, Integer sortOrder, Pageable pageable) throws Exception;


@Override
	public Page<Tdc> findByCriteria(String cups, Integer status, Integer satisfaccion, Long idCt, String tipo, String subtipo, String sortField, Integer sortOrder, Pageable pageable) throws Exception{

	        return tdcDao.findAll(new Specification<Tdc>() {
	            @Override
	            public Predicate toPredicate(Root<Tdc> root, CriteriaQuery<?> query, CriteriaBuilder criteriaBuilder) {
	                List<Predicate> predicates = new ArrayList<>();
					/*Join<JobType, Tdc> jobTypeTdcJoin = root.join("tipo");
					Join<JobType, JobSubType> subjoin = jobTypeTdcJoin.join("jobSubTypes");*/
	                if(satisfaccion!=null) {
	                    predicates.add(criteriaBuilder.or(
	                            criteriaBuilder.greaterThanOrEqualTo(root.get("porcentajeSatisfaccion"), satisfaccion))
	                    );
	                }
	                if(cups!=null) {
	                    predicates.add(criteriaBuilder.or(
	                            criteriaBuilder.like(root.get("cups"), "%" + cups + "%"))
	                    );
	                }
	                if(status!=null) {
	                	predicates.add(criteriaBuilder.and(criteriaBuilder.equal(root.get("idStatus"), status)));
	                }
	                
	                if(idCt!=null) {
	                	predicates.add(criteriaBuilder.and(criteriaBuilder.equal(root.get("idCt"), idCt)));
	                }
					if(tipo!=null) {
						predicates.add(criteriaBuilder.and(criteriaBuilder.equal(root.get("tipo"), jobTypeDao.findById(Long.valueOf(tipo)).get())));
					}
					if (subtipo!=null) {
						predicates.add(criteriaBuilder.and(criteriaBuilder.equal(root.get("subtipo"), jobSubTypeDao.findById(Long.valueOf(subtipo)).get())));
					}
	                if (sortField ==null) {
	                query.orderBy( criteriaBuilder.asc(root.get("id")));
	                } else {
	                	
	                	if(sortOrder == 1) {
	    	                query.orderBy( criteriaBuilder.asc(root.get(sortField)));

	                		
	                	} else {
	                		
	    	                query.orderBy( criteriaBuilder.desc(root.get(sortField)));
	                		                	}
	                		                	
	                }
	                
	                return criteriaBuilder.and(predicates.toArray(new Predicate[predicates.size()]));
	            }
	        }, pageable);
	    }


**********************************************************************************


	@PutMapping(value = "/upload_cc", consumes = { MediaType.APPLICATION_JSON_VALUE,MediaType.MULTIPART_FORM_DATA_VALUE })
	public ResponseEntity<?> updateCc3(@RequestPart("Cc") String ccJson, @RequestPart(required = false, name ="files") MultipartFile[] files ) throws Exception {


	if(files!=null) {
					Set<Image> imageList = new HashSet<>();
					List<MultipartFile> fileList = Arrays.asList(files).stream().collect(Collectors.toList());
						/*	storageService.save(file, idCc);
							fileNames.add(file.getOriginalFilename()); */
					for(int i=0; i<fileList.size(); i++) {
						try {
							Image image = new Image();
							image.setFileName(s3StorageService.putObject(fileList.get(i)));
							image.setURL(s3StorageService.getServerUrl());
							image.setIdCc(idCc);
							imageList.add(image);
							/*Files.copy(fileList.get(i).getInputStream(), this.root.resolve(fileList.get(i).getOriginalFilename()));

							image.setURL(ServerInfo.URL);
							image.setFileName(fileList.get(i).getOriginalFilename());
							image.setIdCc(idCc);
							imageList.add(image);*/
						} catch (IOException e) {
							return new ResponseEntity<>(new ErrorResponseDTO(e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
						} catch (Exception e) {
							return new ResponseEntity<>(new ErrorResponseDTO(e.getMessage()), HttpStatus.INTERNAL_SERVER_ERROR);
						}

